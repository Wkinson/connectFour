@inject ConnectFour.Shared.GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: yellow;
            --player1: blue;
            --player2: red;
        }
    </style>
</HeadContent>

<nav>
    <span title="Click to play a piece" @onclick="() => PlayPiece(0)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(1)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(2)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(3)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(4)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(5)">🔽</span>
    <span title="Click to play a piece" @onclick="() => PlayPiece(6)">🔽</span>
</nav>

<article>
    @WinnerMessage <button style="@ResetStyle" @omclick="ResetGame">Rest the game</button> 
    <br />
    <span class="alert-danger">@ErrorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++) {
            <span class="container">
                <span></span>
            </span>
        }
    </div>

    @for (var i = 0; i < 42; i++){
        <span class="@Pieces[i]"></span>
    } 
</div>

@code {
    private string[] Pieces = new string[42];
    private string WinnerMessage = string.Empty;
    private string ErrorMessage = string.Empty;
    private string CurrentTurn => (WinnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (WinnerMessage == string.Empty) ? "display: none" : "";

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }

    private void PlayPiece(Byte col)
    {
        ErrorMessage = string.Empty;

        try
        {
            var landingRow = State.PlayPiece(col);
            var cssClass = $"player{State.PlayPiece(col)} col{col} drop{landingRow}";
            Pieces[State.CurrentTurn - 1] = cssClass;
        }
        catch(ArgumentException ex)
        {
            ErrorMessage = ex.Message;
        }

        WinnerMessage = State.CheckForWin() switch
        {
            ConnectFour.Shared.GameState.WinState.Player1_Wins => "Player 1 Wins!",
            ConnectFour.Shared.GameState.WinState.Player2_Wins => "Player 2 Wins!",
            ConnectFour.Shared.GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };
    }
    
    void ResetGame()
    {
        State.ResetBoard();
        WinnerMessage = string.Empty;
        ErrorMessage = string.Empty;
        Pieces = new string[42];
    }
}
